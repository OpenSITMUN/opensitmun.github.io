{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Principal","text":""},{"location":"#sitmun","title":"SITMUN","text":"<p>La red europea SITMUN tiene como objetivo, entre otros, el desarrollo y mantenimiento de la plataforma SITMUN. Esta plataforma, abierta, de c\u00f3digo libre con licencia EUPL v1.2, permite que las organizaciones supramunicipales que participan puedan ofrecer, a los municpios que coordinan, las aplicaciones de gesti\u00f3n territorial que estos municipios necesitan para su d\u00eda a d\u00eda. El despliegue, mantenimiento y actualizaci\u00f3n de estas aplicaciones est\u00e1 centralizado por la organizaci\u00f3n supramunicipal, de manera que los recursos de los municipios pueden focalizarse en prestar servicios a sus ciudadanos.</p> <p>Esta web tiene como objetivo poner la documentaci\u00f3n t\u00e9cnica de la plataforma SITMUN a disposici\u00f3n de quienes participen en su desarrollo, en su implantaci\u00f3n o en el desarrollo de aplicaciones que la utilicen.</p>"},{"location":"#secciones-de-esta-web","title":"Secciones de esta web","text":"<ul> <li>La arquitectura describe desde un nivel de abstracci\u00f3n alto los principales elementos de la plataforma SITMUN.</li> <li>En la secci\u00f3n de gesti\u00f3n se describen aspectos organizativos y t\u00e9cnicos en lo que respecta al versionado, seguimiento del trabajo y automatizaci\u00f3n de procesos.</li> <li>En https://sitmun-backend-core.herokuapp.com/swagger-ui/index.html est\u00e1n documentadas las API actualmente desplegadas en Heroku (servidor de pruebas y preproducci\u00f3n).</li> <li>La secci\u00f3n de contacto sugiere formas de contactar con los distintos participantes en el proyecto as\u00ed como sus roles en el mismo.</li> </ul>"},{"location":"#aviso","title":"Aviso","text":"<p>Esta web de documentaci\u00f3n est\u00e1 en pleno proceso de renovaci\u00f3n y por tanto es un trabajo en marcha. Si se detecta alg\u00fan problema se puede abrir una incidencia en https://github.com/sitmun/community/issues/new.</p>"},{"location":"contacto/","title":"Contacto","text":""},{"location":"contacto/#comite-tecnico","title":"Comit\u00e9 t\u00e9cnico","text":"<ul> <li>Fina Saez saezbj@diba.cat and Montse Marco marcosm@diba.cat - Diputaci\u00f3 de Barcelona.</li> <li>Marta Codinachs codinachssm@diba.cat - Diputaci\u00f3 de Barcelona.</li> <li>Ricard Cots cartografia@cime.es - Consell Insular de Menorca.</li> <li>Marc Ros\u00e9s cartografia@cime.es - SILME.</li> <li>Miquel Latorre mlatorre@diputaciolleida.cat - Diputaci\u00f3 de Lleida.</li> </ul>"},{"location":"contacto/#equipo-de-coordinacion-tecnica","title":"Equipo de coordinaci\u00f3n t\u00e9cnica","text":"<p>La labor principal de este equipo es mantener una visi\u00f3n global del proyecto y coordinar a las distintas empresas y administraciones involucradas desde el punto de vista t\u00e9cnico. Entre sus tareas est\u00e1n la documentaci\u00f3n t\u00e9cnica, la validaci\u00f3n de propuestas y entregables, el asesoramiento tecnol\u00f3gico al comit\u00e9 t\u00e9cnico del proyecto, etc.</p> <ul> <li>Rub\u00e9n B\u00e9jar rbejar@unizar.es y Francisco Javier Lopez Pellicer fjlopez@unizar.es - Universidad Zaragoza.</li> </ul>"},{"location":"contacto/#la-red-europea-sitmun","title":"La Red Europea SITMUN","text":"<p>Toda la informaci\u00f3n sobre la Red Europea SITMUN est\u00e1 disponible en http://www.sitmun.org.</p>"},{"location":"management/","title":"Gesti\u00f3n","text":"<p>En l\u00edneas generales se trata de mantener una gesti\u00f3n \u00e1gil, dentro de las limitaciones impuestas por un proyecto de estas caracter\u00edsticas, coordinado entre varias administraciones p\u00fablicas que a su vez subcontratan la mayor parte de los esfuerzos de desarrollo a distintos adjudicatarios. El equipo de coordinaci\u00f3n t\u00e9cnica del proyecto es el punto de contacto ante cualquier duda que surja sobre estas cosas.</p>"},{"location":"management/#trabajo-en-github","title":"Trabajo en GitHub","text":"<p>Se trabaja \"en abierto\" sobre GitHub, bajo el paraguas de la organizaci\u00f3n SITMUN. </p> <ul> <li>Los desarrolladores y desarrolladoras tienen que crear cuentas en GitHub y se les dar\u00e1n los permisos necesarios para trabajar en repositorios en esa organizaci\u00f3n.</li> <li>La gesti\u00f3n del trabajo (tareas/incidencias) se hace usando GitHub Issues. En ocasiones se usan tableros de proyecto de GitHub; esto depende del subproyecto concreto y se acuerda con los desarrolladores en cada caso. En cualquier caso los tableros de proyecto solo son una forma distinta de ver las tareas/incidiencias de GitHub issues.</li> <li>La construcci\u00f3n y despliegue autom\u00e1ticos se hace usando GitHub Actions.</li> <li>En general se proporciona acceso directo, en lectura y escritura, a los repositorios necesarios. No hay un equipo de desarrollo principal que haga el grueso del trabajo y luego peque\u00f1as contribuciones puntuales de otros, as\u00ed que el modelo de forks y pull requests no es, por ahora, adecuado.</li> <li>El equipo de coordinaci\u00f3n t\u00e9cnica del proyecto tiene que tener acceso a los desarrollos en tiempo real para poder cumpilr su papel de coordinaci\u00f3n y de validaci\u00f3n t\u00e9cnica de los resultados.</li> </ul>"},{"location":"management/#automatizacion-de-procesos","title":"Automatizaci\u00f3n de procesos","text":"<p>En general haremos siempre \u00e9nfasis en la automatizaci\u00f3n de todo lo que sea automatizable en este proyecto.</p> <ul> <li>En especial, no se puede trabajar en este proyecto sin tener claro que la automatizaci\u00f3n de pruebas es una buena pr\u00e1ctica inexcusable en el desarrollo de software. </li> <li>La construcci\u00f3n y despliegue autom\u00e1ticos, al menos en servidores de pruebas y/o pre-producci\u00f3n, tambi\u00e9n ser\u00e1n el requisito por defecto, salvo muy buena raz\u00f3n en contra. Ahora mismo la construcci\u00f3n y pruebas autom\u00e1ticas se hacen en GitHub Actions, y el proyecto hace las pruebas de preproducci\u00f3n en Heroku. Esto puede evolucionar con el tiempo.</li> <li>La construcci\u00f3n autom\u00e1tica se hace con Gradle o NPM seg\u00fan sean proyectos Java o Angular. En general la mejor documentaci\u00f3n sobre los procesos de construcci\u00f3n autom\u00e1tica son los scripts de GitHub Actions en cada repositorio. En algunos repositorios hay algunos scripts de Bash en <code>/build-scripts</code>. Estos pueden usarse en local, pero de nuevo es importante ver c\u00f3mo se usan desde los scripts de GitHub Actions, incluyendo qu\u00e9 variables de entorno deben estar configuradas.</li> <li>Los secretos (contrase\u00f1as o tokens) se gestionan adecuadamente usando GitHub secrets. No hay, ni debe haber, ninguna contrase\u00f1a o token en ninguna parte de ning\u00fan repositorio.</li> <li>En algunos repositorios se hace uso de SonarCloud para el an\u00e1lisis est\u00e1tico del c\u00f3digo.</li> <li>Seguiremos semantic versioning 2.0.0 cuando haya que dar identificadores de versi\u00f3n p\u00fablicos a algo.</li> </ul>"},{"location":"management/#algunos-detalles-posiblemente-desactualizados-sobre-la-construccion-automatica","title":"Algunos detalles (posiblemente desactualizados) sobre la construcci\u00f3n autom\u00e1tica","text":"<p>Mantenemos en esta secci\u00f3n algo de informaci\u00f3n que, aunque posiblemente est\u00e1 desactualizada y est\u00e1 parcialmente en ingl\u00e9s, a\u00fan podr\u00eda ser valiosa para entender algunas cosas.</p>"},{"location":"management/#repositorios-y-paquetes","title":"Repositorios y paquetes","text":"<p>Originalmente algunos componentes se publicaban como paquetes en el registro de GitHub. Esto complicaba las cosas m\u00e1s de lo necesario sin aportar ventajas evidentes a corto plazo y en la escala de este proyecto y ahora mismo no se est\u00e1 haciendo. La documentaci\u00f3n sobre esto era esta:</p> <p>The three libraries that can be imported by different applications are published in the GitHub packages registry: org.sitmun.plugin.core package, developed in this repository, @sitmun/frontend-core package, developed in this repository and @sitmun/frontend-gui package, developed in this repository. Github packages only supports scoped packages in their npm registry. SITMUN npm packages must be scoped as @sitmun. Even if you are only importing those packages in an application, you still need a GitHub personal access token, created for your GitHub user and with at least the read:packages scope besides read permission on the corresponding GitHub repository.</p> <p>Every SITMUN repository which library/application publishes, or imports, npm packages from/on the Github registry includes a .npmrc file with its URL, registry=https://npm.pkg.github.com/sitmun, to make it more difficult to accidentally publish on a different package registry. The package.json of those libraries that intend to published to this registry must include a line such as \"repository\": \"git://github.com/sitmun/REPOSITORY_NAME.git\". The packages must be public in order to be publishable (e.g., you can add \"private\" : \"false\" to packages.json). Be careful because npm install will now try to fetch everything from that registry, so when you want to fetch packages from the public npm registry, you may have to write, for instance, npm install --registry=https://registry.npmjs.org.</p>"},{"location":"management/#scripts-de-construccion","title":"Scripts de construcci\u00f3n","text":"<p>Esto es anterior al paso a GitHub Actions. Originalmente se trabajaba con Travis CI. Pero hay informaci\u00f3n que posiblemente no est\u00e1 documentada en otros sitios.</p> <p>Currently every plugin/library/application includes in its repository a /build-scripts folder with some Bash shell scripts that help to build and deploy them. However, the canonical definition of the build process in each repository is in the configuration file for the CI server. The CI server used to be Travis CI, but after changes to their policy towards open source projects, we migrated to Github Actions. These configuration files are thus currently the GitHub Actions workflows in the .github/workflows directory in each repository. These files will generally use npm and ng for the front-end libraries and applications, and gradle for the back-end components. They use sonarcloud for static code analysis, compodoc to create the angular libraries documentation (accessible then in https://sitmun.github.io/) etc. They also deploy some applications and components (currently to GitHub pages and Heroku) for testing.</p> <p>The scripts require a number of values that are different for each developer / build environment, and other values which are secrets that can't be shared in the repositories. If you want to build locally, those values generally must be in environment variables. Depending on the repository and your needs your environment will need to have defined:</p> <p>JAVA_HOME: Make sure it points to a proper installation of the required version of Java. USERNAME: Your GitHub user. Required to access to the packages in the GitHub registry, and to publish packages there, with the proper access token (see next point). GITHUB_API_KEY: A GitHub personal access token, created for USERNAME and with, at least, the required scopes. These scopes are, in a nutshell, read:packages to download and install packages from GitHub packages and write:packages to upload and publish. Your GitHub user needs also read permissions on the repository to download packages, and write permission to publish them. SONAR_TOKEN: A SonarCloud authentication token is required for the sonarqube Gradle task to work on your computer. The CI build scripts need values for these too. Those are stored as secrets associated to the sitmun organization in GitHub and currently are: SONAR_TOKEN, TOKEN_FOR_WORKFLOWS (the GITHUB_API_KEY), USERNAME_FOR_WORKFLOWS (USERNAME), HEROKU_TOKEN and HEROKU_EMAIL (currently used for the automatic deployment of the back-end to Heroku for testing purposes).</p> <p>Regarding the libraries which are published to the Github packages registry, they are published only on tagged commits. So you can push changes to a library as you like, but if you want that to be published as a package by the CI server, you must tag the commit before (see Versioning for more details). Of course, you can run locally the deployment steps (see the CI server configuration files) and then it will deploy to the repository whatever you have built locally, but again, before doing this read the Versioning page.</p> <p>Travis CI The SITMUN organization in Travis is kept for now, but we are not using it anymore, because of their new policy regarding open source projects. We fulfill every requirement except for one: if there are developers being paid for the project, then you can't use Travis CI for free.</p> <p>SonarCloud Each repository has a sonar-project.properties file with the proper configuration to make it possible to analyze its code on SonarCloud.</p> <p>Programming languages, runtimes and tools Some repositories use only Java (e.g. the backend-core), others use only Node.js and others use both. For the required versions, again the CI server configuration files should be taken as the canonical ones.</p> <p>You also need the Git client.</p>"},{"location":"management/#documentacion-del-codigo","title":"Documentaci\u00f3n del c\u00f3digo","text":"<p>Hubo algunos esfuerzos iniciales de documentaci\u00f3n automatizada a partir de comentarios en el c\u00f3digo. Dados los recursos disponibles, y los plazos de tiempo en los que se mueve el proyecto, ahora intentamos documentar tan solo lo esencial y tratar de mantener eso razonablemente actualizado.</p> <p>Tools used for code documentation The documentation is generated automatically from the proper comments and markup in the code every time that a git push to master is done to the repository. The tools currently used are:</p> <p>Compodoc for the Typescript/Angular code. Swagger2markup for the REST API. Javadoc for the Java classes in the server. Configuration of an IDE</p>"},{"location":"api/autenticacion/","title":"Autenticacion","text":"<p>[OAD(docs/swagger.yaml)]</p>"},{"location":"api/autenticacion/#autenticacion","title":"Autenticaci\u00f3n","text":""},{"location":"api/autenticacion/#accede-con-correo-electronico-contrasena","title":"Accede con correo electr\u00f3nico / contrase\u00f1a","text":"<p>!!! info \"POST /api/authenticate\" Se solicita un JSON Web Token de acceso para que un usuario pueda operar con el resto de API. La solicitud incluye el identificador de usuario y la contrase\u00f1a.</p> <p>Una solicitud correcta se indica mediante un c\u00f3digo de estado HTTP <code>200 OK</code>.</p>"},{"location":"api/autenticacion/#parametros","title":"Par\u00e1metros","text":""},{"location":"api/autenticacion/#cabecera","title":"Cabecera","text":"<p><code>accept</code> string</p> Nombre Tipo Obligatorio Valor <code>accept</code> string <code>application/json</code> <code>content-type</code> string :heavy_check_mark: <code>application/json</code>"},{"location":"api/autenticacion/#parametros-cuerpo","title":"Par\u00e1metros cuerpo","text":"<p>Endpoint: <code>/api/authenticate</code></p> <p>M\u00e9todo: POST</p> <p>Content-Type (petici\u00f3n): application/json</p> <p>Contenido (petici\u00f3n): </p> <p>Estado (respuesta)</p> C\u00f3digo Descripci\u00f3n <code>200</code> Se ha obtenido un JSON Web Token de acceso <code>401</code> No autorizado <p>Content-Type (respuesta 200): application/json</p> <p>Contenido (respuesta 200): application/json</p> Nombre de la propiedad Tipo Descripci\u00f3n id_token string JSON Web Token <p>Cabecera (respuesta)</p> Nombre de la propiedad Descripci\u00f3n Authorization <code>Bearer</code> + JSON Web Token <p>Petici\u00f3n de muestra</p> <pre><code>curl https://[SITMUN]/api/authenticate --header 'Content-Type: application/json' --request POST --data-binary @- &lt;&lt;BODY\n{\n  \"username\": \"[USUARIO]\",\n  \"password\": \"[CONTRASE\u00d1A]\"\n}\nBODY\n</code></pre> <p>!!! Nota de uso </p> <pre><code>En el ejemplo anterior, deber\u00edas reemplazar **[SITMUN]** por el dominio, puerto y contexto donde est\u00e1\ndesplegado **SITMUN Backend**, **[USUARIO]** por un identificador v\u00e1lido de usuarioy **[CONTRASE\u00d1A]**\npor la contrase\u00f1a del usuario.\n</code></pre> <p>Respuesta de muestra</p> <p>Si la respuesta tiene un c\u00f3digo de estado HTTP <code>200 OK</code> tendr\u00e1 una cabecera <code>Authorization</code>  que comenzar\u00e1 con <code>Bearer</code> y separado por un espacio en blanco est\u00e1 un JSON Web Token.</p> <pre><code>{\n  \"id_token\": \"[JSON Web Token]\"\n}\n</code></pre> <p>!!! Nota de uso </p> <pre><code>En el ejemplo anterior, **[JSON Web Token]** ser\u00e1 igual al token de la cabecera **Authorization**.\n</code></pre>"},{"location":"api/referencia/","title":"Referencia","text":""},{"location":"arquitectura/_sources/","title":"Documentaci\u00f3n de dise\u00f1o de SITMUN","text":""}]}